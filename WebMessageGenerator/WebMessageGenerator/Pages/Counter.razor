@page "/counter"
@inject IJSRuntime JS

@using Azure.Messaging.EventHubs;
@using Azure.Messaging.EventHubs.Producer;
@using Newtonsoft.Json;
@using WebMessageGenerator.Models;
@using System.Text;
<PageTitle>Counter</PageTitle>

<h1>@text</h1>

<button @onclick="IncrementCount">Update Time</button>

@code {
    private MarkupString text;    
    private string message = "Send Event to Event Hub";
    private int currentCount = 0;
    private const string connectionString = "Endpoint=sb://jdm-ns-game.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=3U7m7Y9NCjlPeJtk8zbdspPNG7U0d2/1qPQJki0Rzjk=";
    private const string eventHubName = "jdm-eh-container";
    private int messageCtr = 1;
    private EventHubProducerClient producerClient;
    private EditContext editContext;
    protected override void OnInitialized()
    {
        editContext = new(text);
    }
    private async void IncrementCount()
    {
        producerClient = new EventHubProducerClient(connectionString, eventHubName);
        using EventDataBatch eventBatch = await producerClient.CreateBatchAsync();
        try
        {
            for (int i = 0; i < 100; i++)// Create a loop that is governed by the game
            {
                try
                {
                    text = new(await JS.InvokeAsync<string>("sendMessage", ""));
                    if (!eventBatch.TryAdd(new EventData(Encoding.UTF8.GetBytes($"{JsonConvert.SerializeObject(text)}"))))
                    {
                        // if it is too large for the batch
                        throw new Exception($"Event {i} is too large for the batch and cannot be sent.");
                    }
                    else
                    {
                        await producerClient.SendAsync(eventBatch);
                        this.StateHasChanged();
                        Console.WriteLine($"A batch of {messageCtr++} events has been published.");
                       
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                    message = ex.Message;
                }
            }
        }
        catch (Exception ex)
        {
            var msg = "Error";
        }
        finally
        {
            await producerClient.DisposeAsync();
        }
    }

}
